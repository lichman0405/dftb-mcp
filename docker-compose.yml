version: '3.8'

services:
  # TypeScript MCP Server
  typescript-mcp:
    build:
      context: ./typescript-mcp
      dockerfile: Dockerfile
    container_name: dftbopt-typescript-mcp
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - GO_SERVICE_URL=http://go-service:8080
      - REDIS_URL=redis://redis:6379
      - ENABLE_CACHE=true
      - CACHE_TTL=86400
    depends_on:
      - go-service
      - redis
    networks:
      - dftbopt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Go DFTB+ Service
  go-service:
    build:
      context: ./go-service
      dockerfile: Dockerfile
    container_name: dftbopt-go-service
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - WORK_DIR=/app/work
      - DFTB_PATH=/usr/local/bin/dftb+
      - MAX_REQUESTS=10
      - TIMEOUT=300
      - DEBUG=false
      - CLEANUP=true
    volumes:
      - dftb-work:/app/work
    networks:
      - dftbopt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: dftbopt-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - typescript-mcp
      - go-service
    networks:
      - dftbopt-network
    restart: unless-stopped
    profiles:
      - nginx

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: dftbopt-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - dftbopt-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    profiles:
      - redis

  # PostgreSQL for logging (optional)
  postgres:
    image: postgres:15-alpine
    container_name: dftbopt-postgres
    environment:
      - POSTGRES_DB=dftbopt
      - POSTGRES_USER=dftbopt
      - POSTGRES_PASSWORD=dftbopt_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - dftbopt-network
    restart: unless-stopped
    profiles:
      - postgres

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: dftbopt-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - dftbopt-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: dftbopt-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - dftbopt-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  dftb-work:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  dftbopt-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
